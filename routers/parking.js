const { Router } = require('express');
const parking = require('../requests/parking');

const router = new Router();

// mon premier endpoint, celui qui r√©pond avec l'ensemble des parkings
router.get('/', async (req, res) => {
  // tout est d√©j√† cod√©, je n'ai qu'√† utiliser la fonction findAll(), elle se charge de r√©cup√©rer les parkings
  const parkings = await parking.findAll();
  // le middleware doit r√©pondre √† la requ√™te
  // ce qu'attend l'utilisateur, c'est un ensemble de parkings
  // r√©pondons donc avec notre variable parkings
  // res.json permet d'envoyer une r√©ponse au format JSON
  res.json(parkings);
});

// pour les deux prochains endpoints, c'est assez r√©p√©titif et simple
// 1. on cr√©e la m√©thode qui se charge de la partie SQL
// 2. on cr√©e la route correspondante
// 3. dans le middleware, on utilise notre nouvelle m√©thode
// 4. si c'est un SELECT, on r√©pond avec le r√©sultat, sinon on r√©pond OK
router.post('/', async (req, res) => {
  await parking.insert(req.body);

  res.json('OK');
});

router.delete('/:parkingId', async (req, res) => {
  await parking.destroy(req.params.parkingId);

  res.json('OK');
});

// l'update fait d√©j√† un peu plus d√©bat, car on peut mettre √† jour un parking de beaucoup de fa√ßons
// on peut simplement le renommer, ou modifier son pricing, ou rectifier ses horaires d'ouverture
// ou n'importe quelle combinaison de plusieurs infos √† modifier
// mais pas question de coder 300 routes et 300 m√©thodes pour √ßa
// on va plut√¥t r√©fl√©chir √† ce qui pourrait faciliter la vie de nos utilisateurs
// id√©alement, ils n'enverraient que ce qui doit √™tre modifi√©
// et l'id du parking, √ßa, c'est obligatoire
router.put('/:parkingId', async (req, res) => {

  // si on a l'id, on peut d√©j√† aller chercher les donn√©es d'origine
  const theParking = await parking.findOne(req.params.parkingId);

  // puis avec un spread, on copie les propri√©t√©s du parking
  // et les donn√©es envoy√©es par l'utilisateur, qui viendront √©craser les originales
  // payload repr√©sente donc le parking complet, dans sa nouvelle version
  // pour chaque propri√©t√©, soit c'est l'originale, provenant de parking.findOne ci-dessus
  // soit elle a √©t√© √©cras√©e et remplac√©e par celle pr√©sente dans req.body
  const payload = { ...theParking, ...req.body };

  // il ne nous reste qu'√† utiliser notre m√©thode de mise √† jour de parking
  await parking.update(payload);

  // et √† r√©pondre OK, √©videmment üòé
  res.json('OK');
})

module.exports = router;